/******************************************************************************
 *
 *    Copyright (c) 2009-2012  Ascent Dimension, Inc. All rights reserved.
 *
 ******************************************************************************/

package com.github.haixing_hu.sql;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import com.github.haixing_hu.sql.error.NoDataSourceException;

import static java.sql.ResultSet.*;

import static com.github.haixing_hu.lang.Argument.requireNonNull;

/**
 * A simple template class for performing JDBC operations.
 *
 * @author Haixing Hu
 */
public final class JdbcTemplate {

  private DataSource dataSource;
  private boolean readOnly;
  private int transactionIsolation;
  private int resultSetType;
  private int resultSetConcurrency;
  private int resultSetHoldability;
  private int fetchSize;

  /**
   * Constructs a {@link JdbcTemplate} with null data source.
   */
  public JdbcTemplate() {
    this.dataSource = null;
    this.resultSetType = TYPE_FORWARD_ONLY;
    this.resultSetConcurrency = CONCUR_READ_ONLY;
    this.resultSetHoldability = CLOSE_CURSORS_AT_COMMIT;
    this.fetchSize = 0;
  }

  /**
   * Constructs a {@link JdbcTemplate} with a {@link DataSource}.
   *
   * @param dataSource
   *          a data source.
   */
  public JdbcTemplate(final DataSource dataSource) {
    this.dataSource = requireNonNull("dataSource", dataSource);
    this.resultSetType = TYPE_FORWARD_ONLY;
    this.resultSetConcurrency = CONCUR_READ_ONLY;
    this.resultSetHoldability = CLOSE_CURSORS_AT_COMMIT;
  }

  /**
   * Gets the data source.
   *
   * @return the data source used in this class.
   */
  public DataSource getDataSource() {
    return dataSource;
  }

  /**
   * Sets the data source.
   *
   * @param dataSource
   *          the new data source.
   */
  public void setDataSource(final DataSource dataSource) {
    this.dataSource = requireNonNull("dataSource", dataSource);
  }

  /**
   * Retrieves whether the {@link Connection} objects generated by this
   * {@link JdbcTemplate} object are in read-only mode.
   *
   * @return true if this the {@link Connection} objects generated by this
   *         {@link JdbcTemplate} object are read-only; false otherwise.
   */
  public boolean isReadOnly() {
    return readOnly;
  }

  /**
   * Puts the {@link Connection} objects generated by this {@link JdbcTemplate}
   * object in read-only mode as a hint to the driver to enable database
   * optimizations.
   *
   * @param readOnly
   *          true enables read-only mode; false disables it.
   */
  public void setReadOnly(final boolean readOnly) {
    this.readOnly = readOnly;
  }

  /**
   * Retrieves the transaction isolation level of the {@link Connection} objects
   * generated by this {@link JdbcTemplate} object.
   *
   * @return one of the following Connection constants:
   *         Connection.TRANSACTION_READ_UNCOMMITTED,
   *         Connection.TRANSACTION_READ_COMMITTED,
   *         Connection.TRANSACTION_REPEATABLE_READ, or
   *         Connection.TRANSACTION_SERIALIZABLE. (Note that
   *         Connection.TRANSACTION_NONE cannot be used because it specifies
   *         that transactions are not supported.)
   */
  public int getTransactionIsolation() {
    return transactionIsolation;
  }

  /**
   * Sets the transaction isolation level of the {@link Connection} objects
   * generated by this {@link JdbcTemplate} object.
   *
   * @param transactionIsolation
   *          one of the following Connection constants:
   *          Connection.TRANSACTION_READ_UNCOMMITTED,
   *          Connection.TRANSACTION_READ_COMMITTED,
   *          Connection.TRANSACTION_REPEATABLE_READ, or
   *          Connection.TRANSACTION_SERIALIZABLE. (Note that
   *          Connection.TRANSACTION_NONE cannot be used because it specifies
   *          that transactions are not supported.).
   */
  public void setTransactionIsolation(final int transactionIsolation) {
    this.transactionIsolation = transactionIsolation;
  }

  /**
   * Retrieves the result set type for ResultSet objects generated by this
   * {@link JdbcTemplate} object.
   *
   * @return one of ResultSet.TYPE_FORWARD_ONLY,
   *         ResultSet.TYPE_SCROLL_INSENSITIVE, or
   *         ResultSet.TYPE_SCROLL_SENSITIVE.
   */
  public int getResultSetType() {
    return resultSetType;
  }

  /**
   * Sets the result set type for ResultSet objects generated by this
   * {@link JdbcTemplate} object.
   *
   * @param resultSetType
   *          one of ResultSet.TYPE_FORWARD_ONLY,
   *          ResultSet.TYPE_SCROLL_INSENSITIVE, or
   *          ResultSet.TYPE_SCROLL_SENSITIVE.
   */
  public void setResultSetType(final int resultSetType) {
    this.resultSetType = resultSetType;
  }

  /**
   * Retrieves the result set concurrency for ResultSet objects generated by
   * this {@link JdbcTemplate} object.
   *
   * @return either ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
   */
  public int getResultSetConcurrency() {
    return resultSetConcurrency;
  }

  /**
   * Sets the result set concurrency for ResultSet objects generated by this
   * {@link JdbcTemplate} object.
   *
   * @param resultSetConcurrency
   *          either ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
   */
  public void setResultSetConcurrency(final int resultSetConcurrency) {
    this.resultSetConcurrency = resultSetConcurrency;
  }

  /**
   * Retrieves the current holdability of ResultSet objects created by this
   * {@link JdbcTemplate} object.
   *
   * @return the holdability, one of ResultSet.HOLD_CURSORS_OVER_COMMIT or
   *         ResultSet.CLOSE_CURSORS_AT_COMMIT.
   */
  public int getResultSetHoldability() {
    return resultSetHoldability;
  }

  /**
   * Sets the holdability of ResultSet objects created created by this
   * {@link JdbcTemplate} object.
   *
   * @param resultSetHoldability
   *          the holdability, one of ResultSet.HOLD_CURSORS_OVER_COMMIT or
   *          ResultSet.CLOSE_CURSORS_AT_COMMIT.
   */
  public void setResultSetHoldability(final int resultSetHoldability) {
    this.resultSetHoldability = resultSetHoldability;
  }

  /**
   * Gets the fetch size of ResultSet objects created created by this
   * {@link JdbcTemplate} object.
   * <p>
   * The fetch size gives the JDBC driver a hint as to the number of rows that
   * should be fetched from the database when more rows are needed for ResultSet
   * objects generated by this {@link JdbcTemplate}. If the value specified is
   * zero, then the hint is ignored. The default value is zero.
   *
   * @return the fetch size of ResultSet objects created created by this
   *         {@link JdbcTemplate} object.
   */
  public int getFetchSize() {
    return fetchSize;
  }

  /**
   * Sets the fetch size of ResultSet objects created created by this
   * {@link JdbcTemplate} object.
   * <p>
   * The fetch size gives the JDBC driver a hint as to the number of rows that
   * should be fetched from the database when more rows are needed for ResultSet
   * objects generated by this {@link JdbcTemplate}. If the value specified is
   * zero, then the hint is ignored. The default value is zero.
   *
   * @param fetchSize
   *          the fetch size of ResultSet objects created created by this
   *          {@link JdbcTemplate} object.
   */
  public void setFetchSize(final int fetchSize) {
    this.fetchSize = fetchSize;
  }

  /**
   * Initialize the {@link Connection} created by this {@link JdbcTemplate}
   * object.
   *
   * @param conn
   *          a {@link Connection} created by this {@link JdbcTemplate} object.
   * @throws SQLException
   *           if any error occurred.
   */
  protected void initConnection(final Connection conn) throws SQLException {
    conn.setAutoCommit(false);
    conn.setReadOnly(readOnly);
    conn.setHoldability(resultSetHoldability);
    conn.setTransactionIsolation(transactionIsolation);
  }

  /**
   * Initialize the {@link Statement} created by this {@link JdbcTemplate}
   * object.
   *
   * @param stmt
   *          a {@link Statement} created by this {@link JdbcTemplate} object.
   * @throws SQLException
   *           if any error occurred.
   */
  protected void initStatement(final Statement stmt) throws SQLException {
    stmt.setFetchSize(fetchSize);
  }

  /**
   * Creates a {@link Statement} for a connection.
   *
   * @param conn
   *          a connection object.
   * @return a {@link Statement} created for the connection.
   * @throws SQLException
   *           if any error occurred.
   */
  protected Statement createStatement(final Connection conn)
      throws SQLException {
    return conn.createStatement(resultSetType, resultSetConcurrency,
        resultSetHoldability);
  }

  /**
   * Creates a {@link PreparedStatement} for a connection.
   *
   * @param conn
   *          a connection object.
   * @param sql
   *          an SQL statement that may contain one or more '?' IN parameter
   *          placeholders.
   * @return a {@link PreparedStatement} created for the connection.
   * @throws SQLException
   *           if any error occurred.
   */
  protected PreparedStatement preparedStatement(final Connection conn,
      final String sql) throws SQLException {
    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency,
        resultSetHoldability);
  }

  /**
   * Creates a {@link CallableStatement} for a connection.
   *
   * @param conn
   *          a connection object.
   * @param sql
   *          a String object that is the SQL statement to be sent to the
   *          database; may contain on or more '?' parameters
   * @return a {@link CallableStatement} created for the connection.
   * @throws SQLException
   *           if any error occurred.
   */
  protected CallableStatement preparedCall(final Connection conn,
      final String sql) throws SQLException {
    return conn.prepareCall(sql, resultSetType, resultSetConcurrency,
        resultSetHoldability);
  }

  /**
   * Performs a JDBC operation in a transaction.
   * <p>
   * This is a template method used to simplify the exception catching of
   * JDBC transactions.
   *
   * @param operation
   *          the operation to be performed.
   * @return the result of the operation.
   * @throws SQLException
   *           if any error occurred.
   */
  public <R> R transaction(final JdbcOperation<R> operation)
      throws SQLException {
    if (dataSource == null) {
      throw new NoDataSourceException();
    }
    final Connection conn = dataSource.getConnection();
    try {
      initConnection(conn);
      final R result = operation.perform(conn);
      conn.commit();
      return result;
    } catch (final SQLException e) {
      JdbcUtils.rollbackQuietly(conn);
      throw e;
    } catch (final Exception e) {
      JdbcUtils.rollbackQuietly(conn);
      throw new SQLException(e);
    } finally {
      JdbcUtils.closeQuietly(conn);
    }
  }
}
